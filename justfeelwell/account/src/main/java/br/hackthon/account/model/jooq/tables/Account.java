/*
 * This file is generated by jOOQ.
 */
package br.hackthon.account.model.jooq.tables;


import br.hackthon.account.model.jooq.Indexes;
import br.hackthon.account.model.jooq.Keys;
import br.hackthon.account.model.jooq.tables.records.AccountRecord;

import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Account extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = -650243850;

    /**
     * The reference instance of <code>account.account</code>
     */
    public static final Account ACCOUNT_ = new Account();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>account.account.id</code>.
     */
    public final TableField<AccountRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>account.account.nr_identity</code>.
     */
    public final TableField<AccountRecord, Long> NR_IDENTITY = createField("nr_identity", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>account.account.ds_usename</code>.
     */
    public final TableField<AccountRecord, String> DS_USENAME = createField("ds_usename", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>account.account.ds_password</code>.
     */
    public final TableField<AccountRecord, String> DS_PASSWORD = createField("ds_password", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>account.account.ds_name</code>.
     */
    public final TableField<AccountRecord, String> DS_NAME = createField("ds_name", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>account.account.dt_birth</code>.
     */
    public final TableField<AccountRecord, Date> DT_BIRTH = createField("dt_birth", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>account.account.ds_email</code>.
     */
    public final TableField<AccountRecord, String> DS_EMAIL = createField("ds_email", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>account.account.ds_address</code>.
     */
    public final TableField<AccountRecord, String> DS_ADDRESS = createField("ds_address", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>account.account.vl_latitude</code>.
     */
    public final TableField<AccountRecord, BigDecimal> VL_LATITUDE = createField("vl_latitude", org.jooq.impl.SQLDataType.DECIMAL(10, 8), this, "");

    /**
     * The column <code>account.account.vl_longitude</code>.
     */
    public final TableField<AccountRecord, BigDecimal> VL_LONGITUDE = createField("vl_longitude", org.jooq.impl.SQLDataType.DECIMAL(11, 8), this, "");

    /**
     * Create a <code>account.account</code> table reference
     */
    public Account() {
        this(DSL.name("account"), null);
    }

    /**
     * Create an aliased <code>account.account</code> table reference
     */
    public Account(String alias) {
        this(DSL.name(alias), ACCOUNT_);
    }

    /**
     * Create an aliased <code>account.account</code> table reference
     */
    public Account(Name alias) {
        this(alias, ACCOUNT_);
    }

    private Account(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Account(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return br.hackthon.account.model.jooq.Account.ACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCOUNT_DS_USENAME, Indexes.ACCOUNT_NR_IDENTITY, Indexes.ACCOUNT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccountRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountRecord>>asList(Keys.KEY_ACCOUNT_PRIMARY, Keys.KEY_ACCOUNT_NR_IDENTITY, Keys.KEY_ACCOUNT_DS_USENAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Account as(String alias) {
        return new Account(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Account as(Name alias) {
        return new Account(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(String name) {
        return new Account(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(Name name) {
        return new Account(name, null);
    }
}
