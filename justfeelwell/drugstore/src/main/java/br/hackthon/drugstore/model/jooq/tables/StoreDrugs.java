/*
 * This file is generated by jOOQ.
 */
package br.hackthon.drugstore.jooq.tables;


import br.hackthon.drugstore.jooq.Drugstore;
import br.hackthon.drugstore.jooq.Indexes;
import br.hackthon.drugstore.jooq.Keys;
import br.hackthon.drugstore.jooq.tables.records.StoreDrugsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoreDrugs extends TableImpl<StoreDrugsRecord> {

    private static final long serialVersionUID = 322234334;

    /**
     * The reference instance of <code>drugstore.store_drugs</code>
     */
    public static final StoreDrugs STORE_DRUGS = new StoreDrugs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StoreDrugsRecord> getRecordType() {
        return StoreDrugsRecord.class;
    }

    /**
     * The column <code>drugstore.store_drugs.id_store</code>.
     */
    public final TableField<StoreDrugsRecord, Long> ID_STORE = createField("id_store", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>drugstore.store_drugs.id_drug</code>.
     */
    public final TableField<StoreDrugsRecord, Long> ID_DRUG = createField("id_drug", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>drugstore.store_drugs</code> table reference
     */
    public StoreDrugs() {
        this(DSL.name("store_drugs"), null);
    }

    /**
     * Create an aliased <code>drugstore.store_drugs</code> table reference
     */
    public StoreDrugs(String alias) {
        this(DSL.name(alias), STORE_DRUGS);
    }

    /**
     * Create an aliased <code>drugstore.store_drugs</code> table reference
     */
    public StoreDrugs(Name alias) {
        this(alias, STORE_DRUGS);
    }

    private StoreDrugs(Name alias, Table<StoreDrugsRecord> aliased) {
        this(alias, aliased, null);
    }

    private StoreDrugs(Name alias, Table<StoreDrugsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Drugstore.DRUGSTORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STORE_DRUGS_ID_DRUG, Indexes.STORE_DRUGS_ID_STORE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StoreDrugsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StoreDrugsRecord, ?>>asList(Keys.STORE_DRUGS_IBFK_1, Keys.STORE_DRUGS_IBFK_2);
    }

    public br.hackthon.drugstore.jooq.tables.Drugstore drugstore() {
        return new br.hackthon.drugstore.jooq.tables.Drugstore(this, Keys.STORE_DRUGS_IBFK_1);
    }

    public Drug drug() {
        return new Drug(this, Keys.STORE_DRUGS_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StoreDrugs as(String alias) {
        return new StoreDrugs(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StoreDrugs as(Name alias) {
        return new StoreDrugs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StoreDrugs rename(String name) {
        return new StoreDrugs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StoreDrugs rename(Name name) {
        return new StoreDrugs(name, null);
    }
}
