/*
 * This file is generated by jOOQ.
 */
package br.hackthon.drugstore.jooq.tables;


import br.hackthon.drugstore.jooq.Drugstore;
import br.hackthon.drugstore.jooq.Indexes;
import br.hackthon.drugstore.jooq.Keys;
import br.hackthon.drugstore.jooq.tables.records.DrugRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Drug extends TableImpl<DrugRecord> {

    private static final long serialVersionUID = 403336508;

    /**
     * The reference instance of <code>drugstore.drug</code>
     */
    public static final Drug DRUG = new Drug();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DrugRecord> getRecordType() {
        return DrugRecord.class;
    }

    /**
     * The column <code>drugstore.drug.id_drug</code>.
     */
    public final TableField<DrugRecord, Long> ID_DRUG = createField("id_drug", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>drugstore.drug.ds_name</code>.
     */
    public final TableField<DrugRecord, String> DS_NAME = createField("ds_name", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>drugstore.drug.ds_description</code>.
     */
    public final TableField<DrugRecord, String> DS_DESCRIPTION = createField("ds_description", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * Create a <code>drugstore.drug</code> table reference
     */
    public Drug() {
        this(DSL.name("drug"), null);
    }

    /**
     * Create an aliased <code>drugstore.drug</code> table reference
     */
    public Drug(String alias) {
        this(DSL.name(alias), DRUG);
    }

    /**
     * Create an aliased <code>drugstore.drug</code> table reference
     */
    public Drug(Name alias) {
        this(alias, DRUG);
    }

    private Drug(Name alias, Table<DrugRecord> aliased) {
        this(alias, aliased, null);
    }

    private Drug(Name alias, Table<DrugRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Drug(Table<O> child, ForeignKey<O, DrugRecord> key) {
        super(child, key, DRUG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Drugstore.DRUGSTORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DRUG_DS_NAME, Indexes.DRUG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DrugRecord, Long> getIdentity() {
        return Keys.IDENTITY_DRUG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DrugRecord> getPrimaryKey() {
        return Keys.KEY_DRUG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DrugRecord>> getKeys() {
        return Arrays.<UniqueKey<DrugRecord>>asList(Keys.KEY_DRUG_PRIMARY, Keys.KEY_DRUG_DS_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Drug as(String alias) {
        return new Drug(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Drug as(Name alias) {
        return new Drug(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Drug rename(String name) {
        return new Drug(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Drug rename(Name name) {
        return new Drug(name, null);
    }
}
